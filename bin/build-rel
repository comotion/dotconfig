#!/bin/sh

# Allow for building releases with makefiles, assumes every folder with a ebin/
# folder is a erlang otp system.
#
# Takes a OTP application, builds it by calling `make rel` and copies the result
# to <target>/<dist> where dist is the OS type. If option -b is given the
# application name will be appended.
#
# Example:
# build-rel -t /tmp -b /var/cache/deployment/ /var/src/otp-app
#
# Stage a build of /var/src/application in /tmp/otp-app-<hash>, if successfull
# /tmp/otp-app-<hash>/rel/otp-app will be copied to
# /var/cache/deployment/otp-app/<dist> where dist is the result of `uname`

set -e

stage="/tmp"

if [ "-t" = $1 ]; then
	stage=$2
	shift 2
fi

[ -z "$stage" ] && { echo "error: temp dir needs a argument.";
	echo "usage: $0 [-t <temp-build-dir>] [[-b] target [source]]"; exit 1; }

target_append_name=false

[ "-b" == $1 ] && { target_append_name=true; shift; }

target=$1
source=$2

[ -z "$source" ] && source=$(pwd)

[ ! -d $source ] && { echo "error: not a directory: '$source'"; exit 1; }
[ ! -d "${source}/ebin" ] && { echo "error: not a erlang project."; exit 1; }

[ -z "$target" ] && target="${source}/dist"
$target_append_name && target="${target}/$(basename $source)"
target="${target}/$(uname | tr 'A-Z' 'a-z')"

if [ ! -d $target ]; then
	if mkdir -p $target; then
		echo "info: created target directory: '$target'"
	else
		echo "error: could not create directory '$target'"
		exit 1
	fi
fi

name=$(basename $source)
ref=""
[ command -v git > /dev/null ] && ref="-$(git rev-parse --short HEAD 2> /dev/null)"
root="${stage}/${name}${ref}"

echo "Building $name-$ref"
echo "=============================="
echo "target: $target"
echo "source: $source"
echo "stage:  $root"

mkdir -p $root
echo "[info] copying source ${source} -> ${root}"
rsync -a --copy-links --exclude '.*' ${source}/ $root
cd $root
echo "excecute make rel ($(pwd))"
echo "[info] cleaning old release"
APP=$name make relclean
if ! APP=$name make rel; then
	echo "error: make reported failure"
	cd - > /dev/null
	rm -r $root
	exit 1
else
	rel="${root}/rel/${name}/"
	echo "[info] moving release ${rel} -> ${target}"
	cp -r $root/rel/$name/* $target
fi

echo "[info] cleaning up"
rm -r $root
